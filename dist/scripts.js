function Boid(e,t){this.x=e||flock.canvas.getAttribute("width")/2,this.y=t||flock.canvas.getAttribute("height")/2}function setHeaderElementsPinned(e){for(var t=[elem.headerTitle,elem.laptop],n=0;n<t.length;n++)t[n].style.position=e?"fixed":"absolute",t[n].style.top=e?"50vh":window.innerHeight+"px"}function updateHeaderElements(e){function t(t,n){return t+(n-t)*e}whRatio=elem.laptopContent.offsetWidth/elem.laptopContent.offsetHeight,elem.header.style.width=t(100,100*elem.laptopContent.offsetWidth/window.innerWidth)+"vw",elem.header.style.height=t(100*(window.innerHeight/window.innerWidth),100*elem.laptopContent.offsetWidth/window.innerWidth/whRatio)+"vw",elem.header.style.top=(e<1?t(window.innerHeight/2,window.innerHeight/2-elem.laptopBase.offsetHeight/2):window.innerHeight-elem.laptopBase.offsetHeight/2)+"px",elem.header.style.position=e<1?"fixed":"absolute",elem.downIndicator.style.opacity=1-e,elem.headerTitle.style.fontSize=t(5,4)+"vw";var n=(gol.canvas.offsetWidth/window.innerWidth+gol.canvas.offsetHeight/window.innerHeight)/2;gol.idealCellSize=20*n,gol.sizeChanged()}document.addEventListener("DOMContentLoaded",function(){window.flock={boids:[],canvas:document.getElementById("boids"),ctx:document.getElementById("boids").getContext("2d"),fps:15,sizeChanged:function(){var e=flock.canvas.offsetWidth,t=flock.canvas.offsetHeight;flock.canvas.setAttribute("width",e),flock.canvas.setAttribute("height",t)},redraw:function(){},step:function(){},interacted:function(e){e.clientX,e.clientY},randomize:function(){},start:function(){flock.step(),flock.redraw(),setTimeout(function(){requestAnimationFrame(flock.start)},1e3/flock.fps)},init:function(){this.sizeChanged(),this.randomize(),this.start()}},window.addEventListener("resize",flock.sizeChanged),document.addEventListener("mousemove",flock.interacted),flock.init()}),document.addEventListener("DOMContentLoaded",function(){window.gol={cellColor:"#37474f",canvas:document.getElementById("gol"),ctx:document.getElementById("gol").getContext("2d"),fps:15,idealCellSize:20,cellSize:[20,20],boardSize:[10,10],board:void 0,_getBlankBoard:function(){for(var e=[],t=0;t<this.boardSize[0];t++)e.push(new Array(this.boardSize[1]).fill(!1));return e},sizeChanged:function(){var e,t,n=gol.canvas.offsetWidth,o=gol.canvas.offsetHeight;gol.canvas.setAttribute("width",n),gol.canvas.setAttribute("height",o),gol.cellSize=[n/Math.round(n/gol.idealCellSize),o/Math.round(o/gol.idealCellSize)];var i=gol.boardSize;gol.boardSize=[Math.round(n/gol.cellSize[0]),Math.round(o/gol.cellSize[1])];var a=[gol.boardSize[0]-i[0],gol.boardSize[1]-i[1]];if(a[0]<0&&(gol.board=gol.board.slice(0,gol.boardSize[0])),a[1]<0)for(e=0;e<gol.board.length;e++)gol.board[e]=gol.board[e].slice(0,gol.boardSize[1]);for(e=0;e<a[0];e++){for(newRow=new Array(gol.boardSize[0]).fill(!1),t=0;t<newRow.length;t++)newRow[t]=Math.random()<.125;gol.board.push(newRow)}for(e=0;e<a[1];e++)for(t=0;t<gol.board.length;t++)gol.board[t].push(Math.random()<.125);gol.redraw()},randomize:function(){for(var e=this.boardSize[0],t=this.boardSize[1],n=0;n<e;n++)for(var o=0;o<t;o++)this.board[n][o]=Math.random()<.125},redraw:function(){var e=this.canvas.getAttribute("width"),t=this.canvas.getAttribute("height");this.ctx.clearRect(0,0,e,t),this.ctx.fillStyle=this.cellColor;for(var n=0;n<this.boardSize[0];n++)for(var o=0;o<this.boardSize[1];o++)this.board[n][o]&&this.ctx.fillRect(this.cellSize[0]*n,this.cellSize[1]*o,this.cellSize[0],this.cellSize[1])},countLiveNeighbors:function(e,t){total=0,xroomneg=e>0,yroomneg=t>0,xroompos=e<this.boardSize[0]-1,yroompos=t<this.boardSize[1]-1,neighbors=[yroomneg&&this.board[e][t-1],xroompos&&yroomneg&&this.board[e+1][t-1],xroompos&&this.board[e+1][t],xroompos&&yroompos&&this.board[e+1][t+1],yroompos&&this.board[e][t+1],xroomneg&&yroompos&&this.board[e-1][t+1],xroomneg&&this.board[e-1][t],xroomneg&&yroompos&&this.board[e-1][t-1]];for(var n=0;n<neighbors.length;n++)total+=neighbors[n];return total},judgeFate:function(e,t){return e?2===t||3===t:3===t},step:function(){newState=this._getBlankBoard();for(var e=0;e<this.boardSize[0];e++)for(var t=0;t<this.boardSize[1];t++)newState[e][t]=this.judgeFate(this.board[e][t],this.countLiveNeighbors(e,t));this.board=newState},interacted:function(e){var t=gol.canvas.getBoundingClientRect(),n=e.clientX,o=e.clientY;if(n>t.left&&o>t.top&&n<t.right&&o<t.bottom){var i=n-t.left,a=o-t.top,r=Math.floor(i/gol.cellSize[0]),s=Math.floor(a/gol.cellSize[1]);gol.board[r][s]=!0}},start:function(){gol.step(),gol.redraw(),setTimeout(function(){requestAnimationFrame(gol.start)},1e3/gol.fps)},init:function(){this.board=this._getBlankBoard(),this.sizeChanged(),this.board=this._getBlankBoard(),this.randomize(),this.start()}},window.addEventListener("resize",gol.sizeChanged),document.addEventListener("mousemove",gol.interacted),gol.init()});var elem={body:document.body,header:document.getElementsByTagName("header")[0],headerTitle:document.getElementsByTagName("h1")[0],downIndicator:document.getElementsByClassName("down-indicator")[0],laptop:document.getElementsByClassName("laptop")[0],laptopContent:document.getElementsByClassName("laptop-content")[0],laptopBase:document.getElementsByClassName("laptop-base")[0]};document.addEventListener("scroll",function(e){var t=window.scrollY,n=t/(window.innerHeight/2);switch(!0){case t<5:setHeaderElementsPinned(!0),updateHeaderElements(0);break;case t<window.innerHeight/2:setHeaderElementsPinned(!0),updateHeaderElements(n);break;default:setHeaderElementsPinned(!1),updateHeaderElements(1)}}),document.addEventListener("DOMContentLoaded",function(){window.typewriter={element:document.getElementById("typewriter"),contents:["I write code. ","I write software. ","I write websites.","I write apps. ","I write libraries. ","I write simulations. ","I design experiences. ","I design interfaces. "],contentIndex:0,typingDelay:[50,100],_commonStart:function(e,t){for(var n=e.split(" "),o=t.split(" "),i=[],a=0;a<n.length;a++){if(n[a]!==o[a])return i.join(" ");i.push(n[a])}},_transitionDescription:function(e,t){var n=this._commonStart(e,t),o=e.length-n.length,i=t.slice(n.length);return{del:o,add:i}},_getTypingDelay:function(){return Math.floor(Math.random()*(this.typingDelay[1]-this.typingDelay[0])+this.typingDelay[0])},backspace:function(e,t){var n,o=e;t=t||function(){},this._backspace1=function(){0===o?t():(n=this.element.textContent,this.element.textContent=n.slice(0,n.length-1),o--,setTimeout(function(){typewriter._backspace1()},this._getTypingDelay()))},this._backspace1()},type:function(e,t){var n=0;t=t||function(){},this._type1=function(){n===e.length?t():(this.element.textContent+=e[n],n++,setTimeout(function(){typewriter._type1()},1.5*this._getTypingDelay()))},this._type1()},next:function(e){this.contentIndex++,this.contentIndex===this.contents.length&&(this.contentIndex=0);var t=this._transitionDescription(this.element.textContent,this.contents[this.contentIndex]);this.backspace(t.del,function(){setTimeout(function(){typewriter.type(t.add,e)},200)})},init:function(){function e(){typewriter._startOnScroll()}this.element.textContent=this.contents[0],this._startOnScroll=function(){window.scrollY+window.innerHeight>this.element.offsetTop+this.element.offsetHeight/2&&(setTimeout(function(){typewriter.play()},1e3),window.removeEventListener("scroll",e))},window.addEventListener("scroll",e)},play:function(){this.next(function(){setTimeout(function(){typewriter.play()},3e3)})}},typewriter.init()});
//# sourceMappingURL=data:application/json;base64,
